name: FINAL CI/CD

on:
  workflow_dispatch:  # 支持手动触发
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  # ==================== CI 阶段 ====================
  
  # 阶段 1: Backend CI
  backend-ci:
    name: 🔨 Backend CI
    uses: ./.github/workflows/backend.yml
    secrets: inherit
  
  # 阶段 2: Frontend CI  
  frontend-ci:
    name: 🎨 Frontend CI
    uses: ./.github/workflows/frontend.yml
    secrets: inherit
  
  # 阶段 3: Python Services CI
  python-ci:
    name: 🐍 Python Services CI
    uses: ./.github/workflows/python-services.yml
    secrets: inherit
  
  # 阶段 4: CI 总结（决定是否继续）
  ci-summary:
    name: ✅ CI 阶段总结
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, python-ci]
    if: always()
    
    outputs:
      ci_status: ${{ steps.check.outputs.status }}
    
    steps:
    - name: 检查 CI 状态
      id: check
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📊 CI 阶段总结报告"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "Backend CI:        ${{ needs.backend-ci.result }}"
        echo "Frontend CI:       ${{ needs.frontend-ci.result }}"
        echo "Python Services:   ${{ needs.python-ci.result }}"
        echo ""
        
        if [[ "${{ needs.backend-ci.result }}" == "failure" ]] || \
           [[ "${{ needs.frontend-ci.result }}" == "failure" ]] || \
           [[ "${{ needs.python-ci.result }}" == "failure" ]]; then
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ CI 失败！流程终止"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "🔙 CD 阶段将不会执行"
          echo "💡 请修复失败的检查项后重新提交"
          echo ""
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ CI 全部通过！"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "📌 这是 Pull Request"
            echo "⏹️  CD 阶段将被跳过（仅在合并到 main 后执行）"
          else
            echo "📌 这是推送到 ${{ github.ref }}"
            echo "✅ 准备进入 CD 阶段"
          fi
          echo ""
          echo "status=success" >> $GITHUB_OUTPUT
        fi

  # ==================== CD 阶段 ====================
  # 注意：只有在推送到 main 分支且 CI 通过时才执行

  # 阶段 5: 部署到测试环境
  deploy-staging:
    name: 🚀 部署到测试环境
    runs-on: ubuntu-latest
    needs: ci-summary
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.ci-summary.result == 'success'
    environment:
      name: staging
      url: http://1.94.200.25:8080  # Backend 测试环境
    
    steps:
    - name: 配置 SSH 密钥
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: 部署到测试服务器
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🚀 部署到测试环境"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "📍 目标服务器: ${{ secrets.SERVER_HOST }}"
        echo "🔄 执行部署脚本..."
        echo ""
        
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          'bash /root/voyagemate/new-voyage-mate/scripts/deploy-full.sh'
        
        echo ""
        echo "✅ 测试环境部署完成"
        echo "🌐 访问地址:"
        echo "   Frontend:   http://${{ secrets.SERVER_HOST }}:3000"
        echo "   Backend:    http://${{ secrets.SERVER_HOST }}:8080"
        echo "   Embedding:  http://${{ secrets.SERVER_HOST }}:8000"
        echo "   RAG:        http://${{ secrets.SERVER_HOST }}:8001"

  # 阶段 7: 冒烟测试
  smoke-test:
    name: 💨 冒烟测试
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.deploy-staging.result == 'success'
    
    steps:
    - name: 执行冒烟测试
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "💨 冒烟测试"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        
        # 等待服务完全启动
        echo "⏳ 等待服务启动..."
        sleep 10
        
        # 测试 Backend
        echo "🏥 测试 Backend..."
        BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:8080/api/actuator/health || echo "000")
        if [ "$BACKEND_STATUS" = "200" ]; then
          echo "✅ Backend 健康检查通过 (HTTP 200)"
        else
          echo "❌ Backend 健康检查失败 (HTTP $BACKEND_STATUS)"
          exit 1
        fi
        
        # 测试 Embedding Service
        echo "🤖 测试 Embedding Service..."
        EMBEDDING_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:8000/health || echo "000")
        if [ "$EMBEDDING_STATUS" = "200" ]; then
          echo "✅ Embedding Service 正常 (HTTP 200)"
        else
          echo "⚠️  Embedding Service 异常 (HTTP $EMBEDDING_STATUS)"
        fi
        
        # 测试 RAG Service
        echo "🧠 测试 RAG Service..."
        RAG_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:8001/health || echo "000")
        if [ "$RAG_STATUS" = "200" ]; then
          echo "✅ RAG Service 正常 (HTTP 200)"
        else
          echo "⚠️  RAG Service 异常 (HTTP $RAG_STATUS)"
        fi
        
        # 测试 Frontend
        echo "🌐 测试 Frontend..."
        FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:3000 || echo "000")
        if [ "$FRONTEND_STATUS" = "200" ]; then
          echo "✅ Frontend 访问正常 (HTTP 200)"
        else
          echo "⚠️  Frontend 访问异常 (HTTP $FRONTEND_STATUS)"
        fi
        
        echo ""
        echo "✅ 所有冒烟测试通过"

  # 阶段 8: 等待人工审批（可选）
  # 注意：这个步骤需要在 GitHub 仓库中配置 Environment
  # 设置方法：Settings → Environments → New environment → 添加 "production-approval"
  approval-gate:
    name: 👤 等待人工审批
    runs-on: ubuntu-latest
    needs: smoke-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.smoke-test.result == 'success'
    # 如果不需要人工审批，可以注释掉下面的 environment 配置
    # environment:
    #   name: production-approval
    
    steps:
    - name: 等待审批
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "👤 等待人工审批"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "⏳ 等待管理员审批部署到生产环境..."
        echo "📧 已发送审批通知"

  # 阶段 9: 部署到生产环境
  deploy-production:
    name: 🎯 部署到生产环境
    runs-on: ubuntu-latest
    needs: approval-gate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.approval-gate.result == 'success'
    environment:
      name: production
      url: http://1.94.200.25:8080  # 生产环境
    
    steps:
    - name: 配置 SSH 密钥
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: 部署到生产服务器
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🎯 部署到生产环境"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "📍 目标服务器: ${{ secrets.SERVER_HOST }}"
        echo "🔄 执行部署脚本..."
        echo ""
        
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
          ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
          'bash /root/voyagemate/new-voyage-mate/scripts/deploy-full.sh'
        
        echo ""
        echo "✅ 生产环境部署完成"
        echo "🌐 访问地址:"
        echo "   Frontend:   http://${{ secrets.SERVER_HOST }}:3000"
        echo "   Backend:    http://${{ secrets.SERVER_HOST }}:8080"
        echo "   Embedding:  http://${{ secrets.SERVER_HOST }}:8000"
        echo "   RAG:        http://${{ secrets.SERVER_HOST }}:8001"

  # # 阶段 10: 部署后验证
  # post-deployment:
  #   name: ✅ 部署后验证
  #   runs-on: ubuntu-latest
  #   needs: deploy-production
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.deploy-production.result == 'success'
    
    # steps:
    # - name: 健康检查和验证
    #   run: |
    #     echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    #     echo "✅ 部署后验证"
    #     echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    #     echo ""
        
    #     # 等待服务稳定
    #     sleep 10
        
        # # 生产环境健康检查
        # echo "🏥 生产环境健康检查..."
        # HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:8080/api/actuator/health || echo "000")
        
        # if [ "$HEALTH_STATUS" = "200" ]; then
        #   echo "✅ 生产环境运行正常"
        #   echo ""
        #   echo "📊 部署信息:"
        #   echo "   服务器: ${{ secrets.SERVER_HOST }}"
        #   echo "   Frontend:   http://${{ secrets.SERVER_HOST }}:3000"
        #   echo "   Backend:    http://${{ secrets.SERVER_HOST }}:8080"
        #   echo "   Embedding:  http://${{ secrets.SERVER_HOST }}:8000"
        #   echo "   RAG:        http://${{ secrets.SERVER_HOST }}:8001"
        #   echo "   部署时间: $(date '+%Y-%m-%d %H:%M:%S')"
        #   echo ""
        #   echo "✅ CI/CD 流程完成！"
        # else
        #   echo "❌ 生产环境健康检查失败 (HTTP $HEALTH_STATUS)"
        #   exit 1
        # fi

  # 流程完成总结
  pipeline-complete:
    name: 🎉 流程完成
    runs-on: ubuntu-latest
    needs: [ci-summary, post-deployment]
    if: always()
    
    steps:
    - name: 生成最终报告
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📋 CI/CD 流程执行报告"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        echo "🔍 CI 阶段:"
        echo "   状态: ${{ needs.ci-summary.result }}"
        echo ""
        
        if [[ "${{ needs.post-deployment.result }}" != "skipped" ]]; then
          echo "🚀 CD 阶段:"
          echo "   状态: ${{ needs.post-deployment.result }}"
        else
          echo "🚀 CD 阶段:"
          echo "   状态: 跳过（PR 或 CI 失败）"
        fi
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        
        if [[ "${{ needs.ci-summary.result }}" == "success" ]]; then
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "✅ PR 检查通过！可以合并"
          elif [[ "${{ needs.post-deployment.result }}" == "success" ]]; then
            echo "🎉 完整的 CI/CD 流程执行成功！"
          else
            echo "⚠️ CI 通过，但 CD 阶段有问题"
          fi
        else
          echo "❌ CI/CD 流程存在失败环节"
          exit 1
        fi

