name: FINAL CI/CD

on:
  # ✅ 修改1：去掉 push develop，只保留 main，用于 PR 场景更清晰
  workflow_dispatch:  # 支持手动触发
  pull_request:
    branches: [ main ]   # ✅ 修改1
    types: [opened, synchronize, reopened, closed]  # ✅ 修改1
  push:
    branches: [ main ]   # ✅ 修改1

jobs:
  # ==================== CI 阶段 ====================

  backend-ci:
    name: Backend CI
    uses: ./.github/workflows/backend.yml
    secrets: inherit

  frontend-ci:
    name: Frontend CI
    uses: ./.github/workflows/frontend.yml
    secrets: inherit

  python-ci:
    name: Python Services CI
    uses: ./.github/workflows/python-services.yml
    secrets: inherit

  # 阶段 4: CI 总结
  ci-summary:
    name: CI 阶段总结
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, python-ci]
    if: always()
    outputs:
      ci_status: ${{ steps.check.outputs.status }}
    steps:
      - name: 检查 CI 状态
        id: check
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo " CI 阶段总结报告"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Backend CI:        ${{ needs.backend-ci.result }}"
          echo "Frontend CI:       ${{ needs.frontend-ci.result }}"
          echo "Python Services:   ${{ needs.python-ci.result }}"
          echo ""

          if [[ "${{ needs.backend-ci.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-ci.result }}" == "failure" ]] || \
             [[ "${{ needs.python-ci.result }}" == "failure" ]]; then
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo " ❌ CI 失败！流程终止"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo " ✅ CI 全部通过！"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "status=success-pr" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "status=success" >> $GITHUB_OUTPUT
            fi
          fi

  # ==================== CD 阶段 ====================
  # ✅ 修改2：CD 阶段仅在 PR 合并到 main 且 CI 成功时触发

  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: ci-summary
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && needs.ci-summary.outputs.ci_status == 'success'  # ✅ 修改2
    environment:
      name: staging
      url: http://1.94.200.25:8080
    
    steps:
      - name: 配置 SSH 密钥
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 部署到测试服务器
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo " 部署到测试环境 (CI通过 + PR已合并)"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            'bash /root/voyagemate/new-voyage-mate/scripts/deploy-full.sh'

  # ✅ 修改3：冒烟测试条件一致
  smoke-test:
    name: 冒烟测试
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && needs.ci-summary.outputs.ci_status == 'success'  # ✅ 修改3
    steps:
      - name: 执行冒烟测试
        run: |
          echo "执行冒烟测试..."

  # ✅ 修改4：人工审批逻辑同样跟随 CI 成功 + PR 合并
  approval-gate:
    name: 等待人工审批
    runs-on: ubuntu-latest
    needs: smoke-test
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && needs.ci-summary.outputs.ci_status == 'success'  # ✅ 修改4
    steps:
      - name: 等待审批
        run: echo "等待管理员审批..."

  # ✅ 修改5：生产环境部署同理（CI 成功 + PR 合并）
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: approval-gate
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && needs.ci-summary.outputs.ci_status == 'success'  # ✅ 修改5
    steps:
      - name: 部署
        run: echo "生产环境部署完成 ✅"
