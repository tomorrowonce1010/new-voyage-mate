name: VoyageMate CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Check which services have changes
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      embedding: ${{ steps.changes.outputs.embedding }}
      rag: ${{ steps.changes.outputs.rag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            embedding:
              - 'embedding-service/**'
            rag:
              - 'rag-service/**'

  # Backend build and test
  backend:
    name: Backend Pipeline
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build and Test
      working-directory: ./backend
      run: |
        mvn clean verify
        mvn jacoco:report
      continue-on-error: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: backend/target/surefire-reports
        
    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar

  # Frontend build and test
  frontend:
    name: Frontend Pipeline
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install and Test
      working-directory: ./frontend
      run: |
        npm ci
        npm test -- --coverage --watchAll=false
        npm run build
      env:
        CI: false
        
    - name: Upload build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

  # Python services
  python-services:
    name: Python Services Pipeline
    needs: changes
    if: needs.changes.outputs.embedding == 'true' || needs.changes.outputs.rag == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [embedding-service, rag-service]
        include:
          - service: embedding-service
            needs-change: ${{ needs.changes.outputs.embedding }}
          - service: rag-service
            needs-change: ${{ needs.changes.outputs.rag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      if: matrix.needs-change == 'true'
      
    - name: Set up Python
      uses: actions/setup-python@v5
      if: matrix.needs-change == 'true'
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: ${{ matrix.service }}/requirements.txt
        
    - name: Install dependencies
      if: matrix.needs-change == 'true'
      working-directory: ./${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Lint
      if: matrix.needs-change == 'true'
      working-directory: ./${{ matrix.service }}
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  # Summary job
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [backend, frontend, python-services]
    if: always()
    
    steps:
    - name: Check pipeline status
      run: |
        echo "Backend: ${{ needs.backend.result }}"
        echo "Frontend: ${{ needs.frontend.result }}"
        echo "Python Services: ${{ needs.python-services.result }}"
        
        if [[ "${{ needs.backend.result }}" == "failure" ]] || \
           [[ "${{ needs.frontend.result }}" == "failure" ]] || \
           [[ "${{ needs.python-services.result }}" == "failure" ]]; then
          echo "❌ Pipeline failed"
          exit 1
        else
          echo "✅ Pipeline succeeded"
        fi

